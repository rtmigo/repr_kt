name: ci

on:
  push:
    branches: [ dev ]
    paths-ignore:
      - '**.md'
      - '**.txt'
      - '.github/badges/**.svg'
  pull_request:
    branches: [ dev ]
    paths-ignore:
      - '**.md'
      - '**.txt'
      - '.github/badges/**.svg'

jobs:
  test:
    timeout-minutes: 15

    runs-on: ${{ matrix.os }}
    if: ${{ !contains(github.event.head_commit.message, 'Merge remote-tracking branch') }}

    strategy:
      matrix:
        os: [ ubuntu-latest ] # windows-latest

    steps:
      - uses: actions/checkout@v2
      - name: Setup JDK 8
        uses: actions/setup-java@v2
        with:
          java-version: '8'
          distribution: 'adopt'
          cache: gradle

      - name: Run unit tests
        run: gradle test --no-daemon --info

      - name: "JaCoCo: Generate badge"
        if: matrix.os == 'ubuntu-latest'
        id: jacoco
        uses: cicirello/jacoco-badge-generator@v2.5.0
        with:
          jacoco-csv-file: build/reports/jacoco/test/jacocoTestReport.csv
          generate-branches-badge: true

      - name: "JaCoCo: Log coverage percentage"
        if: matrix.os == 'ubuntu-latest'
        run: |
          echo "coverage = ${{ steps.jacoco.outputs.coverage }}"
          echo "branches = ${{ steps.jacoco.outputs.branches }}"

      - name: "JaCoCo: Commit the badge"
        if: matrix.os == 'ubuntu-latest'
        run: |
          cd .github/badges
          git config --global user.name 'github-actions'
          git config --global user.email '41898282+github-actions[bot]@users.noreply.github.com'
          # cwd is .github/badges
          git add *.svg
          git commit -m "Autogenerated JaCoCo coverage badge" *.svg
          git push origin dev:dev_updated_by_actions --force || true


  to-staging:
    needs: test
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@master
      - name: Merge current -> staging
        uses: devmasx/merge-branch@v1.3.1
        with:
          type: now
          target_branch: staging
          github_token: ${{ github.token }}

  to-master:
    # if the commit message was "publish", copy the tested code
    # to "master" branch and create GitHub release

    if: github.event.head_commit.message=='publish'
    needs: [ test ]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Setup JDK 8
        uses: actions/setup-java@v2
        with:
          java-version: '8'
          distribution: 'adopt'
          cache: gradle

      - name: Build binaries (with testing)
        run: |
          ./gradlew build

      # ADD GITHUB RELEASE
      - name: Warm up gradle
        # so it will not show "..........10%...........20%...........30%...."
        # when called again
        run: ./gradlew pkgver -q

      - name: Get the project version
        run: echo "PKGVER=$(./gradlew pkgver -q)" >> $GITHUB_ENV

      - name: Publish GitHub release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ env.PKGVER }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Attach JAR to release
        uses: skx/github-action-publish-binaries@master
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          releaseId: ${{ env.PKGVER }}
          args: './build/libs/*.jar'

#      # UPDATE MASTER BRANCH
#      - name: Merge to master branch
#        uses: devmasx/merge-branch@v1.3.1
#        with:
#          type: now
#          target_branch: master
#          github_token: ${{ github.token }}
#
